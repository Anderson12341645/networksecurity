name: Deployment Workflow

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'README.md'

jobs:
  integration:
    name: Continuous Integration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Lint code
        run: echo "Linting repository"

      - name: Run unit tests
        run: echo "Running unit tests"

  build-and-push-ecr-image:
    name: Build and Push to ECR
    needs: integration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      
      - name: Install Utilities
        run: |
          sudo apt-get update
          sudo apt-get install -y jq unzip
          
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

  continuous-deployment:  # Fixed indentation - aligned with other jobs
    name: Deploy to EC2
    needs: build-and-push-ecr-image
    runs-on: self-hosted
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
        
      - name: Login to Amazon ECR
        id: login-ecr-deploy
        uses: aws-actions/amazon-ecr-login@v1

      - name: Clean up old containers and images
        run: |
          docker ps -aq | xargs --no-run-if-empty docker rm -f
          docker image prune -a -f
          docker volume prune -f
          docker system prune -f

      - name: Pull latest image
        run: |
          IMAGE_REF="${{ steps.login-ecr-deploy.outputs.registry }}/${{ secrets.ECR_REPOSITORY_NAME }}:latest"
          IMAGE_REF=$(echo "${IMAGE_REF}" | tr -d '[:space:]')
          echo "Pulling sanitized image: ${IMAGE_REF}"
          docker pull "${IMAGE_REF}"

      - name: Stop and remove existing container
        run: |
          if docker inspect security >/dev/null 2>&1; then
            echo "Stopping existing container..."
            docker stop security
            docker rm security
          else
            echo "No existing container found"
          fi

      - name: Run new container
        run: |
            # Use parameter expansion to remove control characters
            IMAGE_REF="${{ steps.login-ecr-deploy.outputs.registry }}/${{ secrets.ECR_REPOSITORY_NAME }}:latest"
            CLEAN_IMAGE_REF="${IMAGE_REF//[^a-zA-Z0-9.:-\/]/}"
            echo "Starting container with sanitized image: ${CLEAN_IMAGE_REF}"
            
            docker run -d \
            -p 8000:8000 \
            --ipc=host \
            --name=security \
            -v ${{ github.workspace }}/certs:/app/certs \
            -e DAGSHUB_TOKEN="${{ secrets.DAGSHUB_TOKEN }}" \
            -e AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}" \
            -e AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
            -e "MONGODB_URL_KEY=${{ secrets.MONGODB_URL_KEY }}" \
            -e BIND=0.0.0.0:8000 \
            -e SSL_CERT_PATH=/app/certs/certificate.crt \
            -e SSL_KEY_PATH=/app/certs/private.key \
            "$CLEAN_IMAGE_REF"
      - name: Generate self-signed certificates
        run: |
            mkdir -p ${{ github.workspace }}/certs
            openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
            -keyout ${{ github.workspace }}/certs/private.key \
            -out ${{ github.workspace }}/certs/certificate.crt \
            -subj "/C=US/ST=State/L=City/O=Organization/CN=localhost"

      - name: Check container logs immediately
        run: |
          echo "Checking container logs immediately after startup:"
          docker logs security

      - name: Verify application status
        run: |
          echo "Waiting for application to start..."
          sleep 60  # Increased timeout
          echo "Testing application health..."
          curl -f http://localhost:8000/health || (echo "Health check failed! Container logs:"; docker logs security; exit 1)
          
          echo "Testing MongoDB connection from EC2..."
          docker exec security python -c "
          import os, pymongo, certifi, sys
          try:
              print('Testing MongoDB connection...')
              client = pymongo.MongoClient(
                  os.environ['MONGODB_URL_KEY'], 
                  tlsCAFile=certifi.where(),
                  serverSelectionTimeoutMS=3000
              )
              client.admin.command('ismaster')
              print('MongoDB connection successful!')
              sys.exit(0)
          except Exception as e:
              print(f'MongoDB connection failed: {str(e)}')
              sys.exit(1)
          " || (echo "MongoDB connection test failed!"; docker logs security; exit 1)
      
      - name: Final cleanup
        if: always()
        run: |
          docker system prune -f

      - name: Check SSL certificates
        run: |
            docker exec security bash -c "update-ca-certificates --fresh"
            docker exec security bash -c "ls -l /etc/ssl/certs"
            docker exec security bash -c "openssl version"
            docker exec security python -c "import certifi; print(certifi.where())"